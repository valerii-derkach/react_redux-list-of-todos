{"version":3,"sources":["store/actions.ts","store/selectors.ts","store/index.ts","api/api.ts","components/TododList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ActionType","Select","setTodosAction","payload","type","SET_TODOS","setUserAction","SET_USER","initialState","todos","user","store","createStore","state","action","getUserSelector","URL","getTodos","a","fetch","response","json","getUserById","userId","deleteTodoById","todoId","method","TodoList","useState","query","setQuery","all","selected","setSelected","dispatch","useDispatch","useSelector","filter","todo","title","toLowerCase","includes","active","completed","getTodosSelector","useEffect","loadTodosFromServer","todosFromServer","console","log","getUser","id","userFromServer","deleteTodo","updatedTodos","className","placeholder","value","onChange","event","target","map","classNames","checked","readOnly","onClick","CurrentUser","name","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb7fb528.chunk.js","sourcesContent":["import { User, Todo } from '../react-app-env';\n\nexport enum ActionType {\n  SET_TODOS = 'SET_TODOS',\n  SET_USER = 'SET_USER',\n}\n\ninterface SetTodos {\n  type: ActionType.SET_TODOS,\n  payload: Todo[],\n}\n\ninterface SetUser {\n  type: ActionType.SET_USER,\n  payload: User | null,\n}\n\nexport type Action = SetTodos | SetUser;\n\nexport const setTodosAction = (payload: Todo[]): Action => ({\n  type: ActionType.SET_TODOS,\n  payload,\n});\n\nexport const setUserAction = (payload: User | null): Action => ({\n  type: ActionType.SET_USER,\n  payload,\n});\n","import { State } from '../react-app-env';\n\nexport enum Select {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n\nexport const getTodosSelector = (query = '', selected = Select.all) => {\n  return (state: State) => {\n    const todosByQuery = state.todos.filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ));\n\n    const todosFiltered = todosByQuery.filter(todo => {\n      switch (selected) {\n        case Select.active:\n          return !todo.completed;\n        case Select.completed:\n          return todo.completed;\n        default:\n          return todo;\n      }\n    });\n\n    return todosFiltered;\n  };\n};\n\nexport const getUserSelector = (state: State) => state.user;\n","import { createStore } from 'redux';\nimport { State } from '../react-app-env';\nimport { Action, ActionType } from './actions';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case ActionType.SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import { Todo, User } from '../react-app-env';\n\nconst URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUserById = async (userId: number): Promise<User> => {\n  const response = await fetch(`${URL}/users/${userId}`);\n\n  return response.json();\n};\n\nexport const deleteTodoById = async (todoId: number):Promise<Todo[]> => {\n  const response = await fetch(`${URL}/todos/${todoId}`,\n    { method: 'DELETE' });\n\n  return response.json();\n};\n","/* eslint-disable no-console */\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport './TodoList.scss';\nimport { setTodosAction, setUserAction } from '../../store/actions';\nimport {\n  getTodosSelector, getUserSelector, Select,\n} from '../../store/selectors';\nimport { deleteTodoById, getTodos, getUserById } from '../../api/api';\n\nexport const TodoList: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [selected, setSelected] = useState<Select>(Select.all);\n\n  const dispatch = useDispatch();\n\n  const todos = useSelector(getTodosSelector(query, selected));\n\n  const user = useSelector(getUserSelector);\n\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      try {\n        const todosFromServer = await getTodos();\n\n        dispatch(setTodosAction(todosFromServer));\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    loadTodosFromServer();\n  }, []);\n\n  const getUser = async (id: number) => {\n    try {\n      const userFromServer = await getUserById(id);\n\n      dispatch(setUserAction(userFromServer));\n    } catch (error) {\n      console.log(error);\n      dispatch(setUserAction(null));\n    }\n  };\n\n  const deleteTodo = async (id: number) => {\n    try {\n      await deleteTodoById(id);\n\n      const updatedTodos = await getTodos();\n\n      dispatch(setTodosAction(updatedTodos));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <section>\n        <input\n          className=\"TodoList__input\"\n          data-cy=\"filterByTitle\"\n          type=\"text\"\n          placeholder=\"enter the todo`s title\"\n          value={query}\n          onChange={(event) => {\n            setQuery(event.target.value);\n          }}\n        />\n        <select\n          className=\"TodoList__select\"\n          onChange={(event) => {\n            setSelected(event.target.value as Select);\n          }}\n        >\n          <option\n            value={Select.all}\n          >\n            Show all\n          </option>\n          <option\n            value={Select.active}\n          >\n            Show active\n          </option>\n          <option\n            value={Select.completed}\n          >\n            Show completed\n          </option>\n        </select>\n      </section>\n\n      <div className=\"TodoList__list-container\">\n        <ul data-cy=\"listOfTodos\" className=\"TodoList__list\">\n          {todos.map(todo => (\n\n            <li\n              key={todo.id}\n              className={classNames('TodoList__item', {\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n              <div>\n                <button\n                  data-cy=\"userButton\"\n                  className={classNames('TodoList__user-button button', {\n                    'TodoList__user-button--selected':\n                      todo.userId === user?.id,\n                  })}\n                  type=\"button\"\n                  onClick={() => {\n                    getUser(todo.userId);\n                  }}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={() => (\n                    deleteTodo(todo.id)\n                  )}\n                  className=\"TodoList__button-delete button\"\n                >\n                  X\n                </button>\n              </div>\n\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setUserAction } from '../../store/actions';\nimport { getUserSelector } from '../../store/selectors';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useDispatch();\n  const user = useSelector(getUserSelector);\n\n  const clearUser = () => dispatch(setUserAction(null));\n\n  if (!user) {\n    return <p>No user selected</p>;\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${user.id}`}</span>\n      </h2>\n\n      <h3 data-cy=\"userName\" className=\"CurrentUser__name\">\n        {user.name}\n      </h3>\n      <p className=\"CurrentUser__email\">\n        {user.email}\n      </p>\n      <p className=\"CurrentUser__phone\">\n        {user.phone}\n      </p>\n      <button\n        className=\"button\"\n        type=\"button\"\n        onClick={() => {\n          clearUser();\n        }}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TododList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App:React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './store/index';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}